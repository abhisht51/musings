---
import { getCollection } from 'astro:content';
import BaseLayout from '../../layouts/BaseLayout.astro';

const allBlogPosts = await getCollection('blog', ({ data }) => {
  return !data.draft;
});

const posts = allBlogPosts.sort(
  (a, b) => b.data.publishDate.valueOf() - a.data.publishDate.valueOf()
);

const uniqueTags = [...new Set(posts.flatMap(post => post.data.tags))].sort();
---

<BaseLayout title="Blog - All Posts" description="All my coding musings and technical thoughts">
  <div class="max-w-4xl mx-auto px-3 sm:px-6 lg:px-8 py-8 sm:py-12">
    <!-- Header -->
    <div class="text-center mb-8 sm:mb-12">
      <h1 class="text-3xl sm:text-4xl font-bold font-mono mb-4">
        <span class="text-green-600 dark:text-green-400">//</span> 
        <span class="text-stone-800 dark:text-white">All Posts</span>
      </h1>
      <p class="text-lg text-stone-600 dark:text-gray-200">
        {posts.length} {posts.length === 1 ? 'post' : 'posts'} and counting...
      </p>
    </div>

    <!-- Tags Filter -->
    {uniqueTags.length > 0 && (
      <div class="mb-8">
        <h2 class="text-sm font-mono text-stone-500 dark:text-gray-300 mb-3 uppercase tracking-wide">
          Filter by tag:
        </h2>
        <div class="flex flex-wrap gap-2">
          <button 
            class="filter-tag px-3 py-1 text-sm font-mono bg-stone-200 dark:bg-gray-700 text-stone-700 dark:text-gray-300 rounded-full hover:bg-blue-200 dark:hover:bg-blue-800 transition-colors active"
            data-tag="all"
          >
            all
          </button>
          {uniqueTags.map((tag) => (
            <button 
              class="filter-tag px-3 py-1 text-sm font-mono bg-stone-200 dark:bg-gray-700 text-stone-700 dark:text-gray-300 rounded-full hover:bg-blue-200 dark:hover:bg-blue-800 transition-colors"
              data-tag={tag}
            >
              {tag}
            </button>
          ))}
        </div>
      </div>
    )}

    <!-- Posts Grid -->
    {posts.length === 0 ? (
      <div class="text-center py-12">
        <div class="text-6xl mb-4">üìù</div>
        <h2 class="text-2xl font-bold font-mono mb-2 text-stone-800 dark:text-white">
          No posts yet
        </h2>
        <p class="text-stone-600 dark:text-gray-200">
          Check back soon for my first post!
        </p>
      </div>
    ) : (
      <div class="grid gap-6 sm:gap-8">
        {posts.map((post) => (
          <a href={`/blog/${post.slug}`} class="block">
            <article 
              class="post-card group bg-stone-50 dark:bg-gray-800 rounded-lg border border-stone-200 dark:border-gray-700 hover:border-blue-300 dark:hover:border-blue-600 hover:shadow-lg transition-all duration-200"
              data-tags={post.data.tags.join(',')}
            >
              <div class="p-4 sm:p-6">
              {post.data.heroImage && (
                <div class="mb-4 rounded-lg overflow-hidden">
                  <img 
                    src={post.data.heroImage} 
                    alt={post.data.title}
                    class="w-full object-contain max-h-48 group-hover:scale-105 transition-transform duration-200"
                  />
                </div>
              )}
              
              <div class="flex items-center text-sm text-stone-500 dark:text-gray-300 mb-3">
                <span class="font-mono">
                  By {post.data.author}
                </span>
                <span class="mx-2">‚Ä¢</span>
                <time class="font-mono">
                  {post.data.publishDate.toLocaleDateString('en-US', {
                    year: 'numeric',
                    month: 'long',
                    day: 'numeric'
                  })}
                </time>
                {post.data.updatedDate && (
                  <span class="ml-4 text-xs">
                    Updated: {post.data.updatedDate.toLocaleDateString('en-US')}
                  </span>
                )}
              </div>

              <h2 class="text-xl sm:text-2xl font-bold mb-3 text-stone-800 dark:text-white group-hover:text-blue-700 dark:group-hover:text-blue-300 transition-colors">
                {post.data.title}
              </h2>

              <p class="text-stone-600 dark:text-gray-200 mb-4 line-clamp-3">
                {post.data.description}
              </p>

              <div class="flex items-center justify-between">
                <div class="flex flex-wrap gap-2">
                  {post.data.tags.map((tag) => (
                    <span class="px-2 py-1 bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200 rounded text-xs font-mono">
                      {tag}
                    </span>
                  ))}
                </div>
              </div>
            </article>
          </a>
        ))}
      </div>
    )}
  </div>
</BaseLayout>

<style>
  .line-clamp-3 {
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
  
  .filter-tag.active {
    @apply bg-blue-500 text-white;
  }
  
  .post-card.hidden {
    display: none;
  }
</style>

<script>
  // Tag filtering functionality
  const filterTags = document.querySelectorAll('.filter-tag');
  const postCards = document.querySelectorAll('.post-card');

  filterTags.forEach(tag => {
    tag.addEventListener('click', () => {
      const targetTag = tag.dataset.tag;
      
      // Update active state
      filterTags.forEach(t => t.classList.remove('active'));
      tag.classList.add('active');
      
      // Filter posts
      postCards.forEach(card => {
        const cardTags = card.dataset.tags?.split(',') || [];
        
        if (targetTag === 'all' || cardTags.includes(targetTag)) {
          card.classList.remove('hidden');
        } else {
          card.classList.add('hidden');
        }
      });
    });
  });
</script>